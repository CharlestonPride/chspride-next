import { Formik, Form, Field, ErrorMessage } from "formik";
import React, { useState } from "react";
import { Col, Container, Row } from "react-bootstrap";
import { Checkbox, TextArea, TextInput } from "../forms/inputs";
import { BlobServiceClient } from "@azure/storage-blob";
import { applicantSchema, initialValues } from "./applicant";
import ReCAPTCHA from "react-google-recaptcha";
import router from "next/router";
import Alert from "../../elements/alert/alert";

const Application = () => {
  const blobServiceClient = new BlobServiceClient(
    `${process.env.NEXT_PUBLIC_APPLICATIONS_SAS}`
  );

  const [showSuccess, setShowSuccess] = useState(false);
  const [showError, setShowError] = useState(false);

  const toggleShowSuccess = () => setShowSuccess(!showSuccess);
  const toggleShowError = () => setShowError(!showError);

  return (
    <Container className="pt-5 pb-7">
      <Row>
        <Col lg={{ span: 8, offset: 2 }}>
          <Formik
            initialValues={initialValues}
            validationSchema={applicantSchema}
            onSubmit={async function (values) {
              if (values.file) {
                values.resume = {
                  fileName: values.file.name,
                  size: values.file.size,
                  type: values.file.type,
                };
              }
              // save to cosmos first, from that we get the uuid generated by the function,
              await fetch(
                `${process.env.NEXT_PUBLIC_API_BASE_URL}/Applications`,
                {
                  method: "POST",
                  headers: {
                    "Content-Type": "application/json",
                  },
                  body: JSON.stringify(values),
                }
              )
                .then(async (response) => {
                  // If there is a resume, use the id for the container and upload the file to blob storage
                  if (values.file) {
                    let id = await response.json().then((data) => data.id);
                    const containerClient =
                      blobServiceClient.getContainerClient(id);
                    const blockBlobClient = containerClient.getBlockBlobClient(
                      values.file.name
                    );
                    blockBlobClient.upload(values.file, values.file.size).then(
                      () => {
                        toggleShowSuccess();
                      },
                      (error) => {
                        toggleShowError();
                      }
                    );
                  }
                })
                .catch(() => {
                  toggleShowError();
                });
            }}
          >
            {({ setFieldValue, isSubmitting }) => (
              <Form>
                <Row>
                  <Col lg="6">
                    <TextInput
                      label="First name"
                      name="firstName"
                      type="text"
                    />
                  </Col>
                  <Col lg="6">
                    <TextInput label="Last name" name="lastName" type="text" />
                  </Col>
                </Row>
                <Row>
                  <Col lg="6">
                    <TextInput label="Email" name="email" type="email" />
                  </Col>
                  <Col lg="6">
                    <TextInput
                      label="Phone number"
                      name="phoneNumber"
                      type="tel"
                    />
                  </Col>
                </Row>

                <Row>
                  <Col>
                    <TextInput
                      label="Subjective"
                      name="pronouns.subjective"
                      type="text"
                      placeholder="he/she/they"
                    />
                  </Col>
                  <Col>
                    <TextInput
                      label="Objective"
                      name="pronouns.objective"
                      type="text"
                      placeholder="him/her/them"
                    />
                  </Col>
                  <Col>
                    <TextInput
                      label="Possessive"
                      name="pronouns.possessive"
                      type="text"
                      placeholder="his/hers/theirs"
                    />
                  </Col>
                </Row>

                <hr />
                <div className="my-3">
                  <Checkbox name="readBylaws" className="my-3">
                    <span className="text-bold">
                      I have read the CPF Bylaws
                    </span>
                  </Checkbox>
                </div>
                <hr />
                <div className="my-3">
                  <div className="form-label mt-3">Resume</div>
                  <div>Please attach a resume</div>
                  <input
                    id="file"
                    className="my-3"
                    type="file"
                    onChange={(event) => {
                      setFieldValue("file", event.currentTarget.files[0]);
                    }}
                  />
                  <ErrorMessage
                    name="file"
                    render={(msg) => <div className="text-danger">{msg}</div>}
                  />
                  <div>
                    Accepted file formats: .doc, .docx, .pdf <br />
                    Max size: 10MB
                  </div>
                </div>
                <hr />
                <TextArea
                  label="Why do you want to join the Charleston Pride Board of Directors?"
                  name="statement"
                ></TextArea>

                <TextArea
                  label="Please list any groups, organizations or businesses that you could serve as a liaison to on behalf of Charleston Pride Festival"
                  name="liaison"
                ></TextArea>

                <div className="form-label">
                  Skills/Experience/Interests (please mark all that apply)
                </div>
                <Checkbox name="skills.administrationManagement">
                  Administration/Management
                </Checkbox>
                <Checkbox name="skills.entertainment">Entertainment</Checkbox>
                <Checkbox name="skills.eventPlanning">Event Planning</Checkbox>
                <Checkbox name="skills.financeAccounting">
                  Finance/Accounting
                </Checkbox>
                <Checkbox name="skills.fundraising">Fundraising</Checkbox>
                <Checkbox name="skills.grantWriting">Grant Writing</Checkbox>
                <Checkbox name="skills.outreachAdvocacy">
                  Outreach/Advocacy
                </Checkbox>
                <Checkbox name="skills.policyDevelopment">
                  Policy Development
                </Checkbox>
                <Checkbox name="skills.programEvaluation">
                  Program Evaluation
                </Checkbox>
                <Checkbox name="skills.socialMediaCommunications">
                  Social Media/Communications
                </Checkbox>
                <Checkbox name="skills.visualMedia">Visual Media</Checkbox>
                <Checkbox name="skills.volunteerManagement">
                  Volunteer Management
                </Checkbox>
                <Checkbox name="skills.technologyWebManagement">
                  Technology/Web Management
                </Checkbox>
                <div className="ps-4">
                  <Field id="other" name="skills.other" placeholder="Other" />
                </div>
                <hr />
                <ReCAPTCHA
                  sitekey={`${process.env.NEXT_PUBLIC_RECAPTCHA_KEY}`}
                  onChange={(value) => {
                    setFieldValue("recaptcha", value);
                  }}
                />
                <ErrorMessage
                  name="recaptcha"
                  render={(msg) => <div className="text-danger">{msg}</div>}
                />
                <button
                  type="submit"
                  disabled={isSubmitting || showSuccess}
                  className="btn bg-gradient-primary mt-3"
                >
                  Submit
                </button>

                <Alert
                  color="success"
                  show={showSuccess}
                  dismissible={true}
                  onDismiss={() => {
                    toggleShowSuccess;
                    router.push("/");
                  }}
                >
                  <strong>Success!</strong> Woohoo, you're application was
                  submitted!
                </Alert>

                <Alert
                  color="danger"
                  dismissible={true}
                  onDismiss={toggleShowError}
                  show={showError}
                >
                  <strong>Oh snap!</strong> Something unexpected happened. Try
                  again. If that doesn't fix it contact us at{" "}
                  <a
                    className="text-white"
                    href="mailto:info@charlestonPride.org"
                  >
                    info@charlestonpride.org
                  </a>
                </Alert>
              </Form>
            )}
          </Formik>
        </Col>
      </Row>
    </Container>
  );
};

export default Application;
